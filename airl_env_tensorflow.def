Bootstrap: localimage
From: ./airl_env_base.simg

%labels
    Author a.cully@imperial.ac.uk
    Version v0.0.1


%environment

%files

%post
	apt-get update
	apt-get install -y --no-install-recommends \
	curl \
        libcurl3-dev \
        libfreetype6-dev \
        libhdf5-serial-dev \
        libzmq3-dev \
        python-dev \
        rsync \
        software-properties-common \
        unzip \
        zip \
        zlib1g-dev

	rm -rf /var/lib/apt/lists/*
    	find /usr/local/cuda-10.0/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete
    	rm /usr/lib/x86_64-linux-gnu/libcudnn_static_v7.a

	# Set up Bazel.

	# Running bazel inside a `docker build` command causes trouble, cf:
	#   https://github.com/bazelbuild/bazel/issues/134
	# The easiest solution is to set up a bazelrc file forcing --batch.
	echo "startup --batch" >>/etc/bazel.bazelrc

	# Similarly, we need to workaround sandboxing issues:
	#   https://github.com/bazelbuild/bazel/issues/418
	echo "build --spawn_strategy=standalone --genrule_strategy=standalone" \
	>>/etc/bazel.bazelrc
	
	# Install the most recent bazel release.
	export BAZEL_VERSION=0.24.1
	mkdir /bazel
	cd /bazel
	curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh
	curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE
	chmod +x bazel-*.sh
	./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh
	cd /
	rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh

	curl -fSsL -O https://bootstrap.pypa.io/get-pip.py
	python get-pip.py
    	rm get-pip.py
	pip --no-cache-dir install \
        Pillow \
        h5py \
        ipykernel \
        jupyter \
        keras_applications \
        keras_preprocessing \
        matplotlib \
        mock \
        numpy \
        scipy \
        sklearn \
	future \
        pandas 
        
	python -m ipykernel.kernelspec

	# Download and build TensorFlow.
	cd /git
	git clone --branch=r2.0 --depth=1 https://github.com/tensorflow/tensorflow.git
	cd tensorflow
	
	# Configure the build for our CUDA configuration.
	export CI_BUILD_PYTHON=python
	export LD_LIBRARY_PATH=/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH
	export TF_NEED_CUDA=1
	export TF_NEED_TENSORRT=0
	export TF_CUDA_COMPUTE_CAPABILITIES=3.5,5.2,6.0,6.1,7.0,7.5
	export TF_CUDA_VERSION=10.0
	export TF_CUDNN_VERSION=7


	ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1

    	LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} \
    	tensorflow/tools/ci_build/builds/configured GPU \
    	bazel build -c opt --local_resources=20000,40,1.0 --copt=-mavx --config=cuda \
    	--cxxopt="-D_GLIBCXX_USE_CXX11_ABI=1" \
    	tensorflow/tools/pip_package:build_pip_package
    
	rm /usr/local/cuda/lib64/stubs/libcuda.so.1
    	bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/pip
    	pip --no-cache-dir install --upgrade /tmp/pip/tensorflow-*.whl 
    	rm -rf /tmp/pip
    	rm -rf /root/.cache
    	# Clean up pip wheel and Bazel cache when done.



    	LD_LIBRARY_PATH=/usr/local/cuda/lib64/stubs:${LD_LIBRARY_PATH} \
    	tensorflow/tools/ci_build/builds/configured GPU \
    	bazel build -c opt --local_resources=20000,40,1.0 --copt=-mavx --config=cuda \
    	--cxxopt="-D_GLIBCXX_USE_CXX11_ABI=1" //tensorflow:libtensorflow_cc.so //tensorflow:libtensorflow_framework.so
    
	mkdir -p                /workspace/include/google/tensorflow 
    	cp -r bazel-genfiles/*  /workspace/include/google/tensorflow/
    	cp -r tensorflow        /workspace/include/google/tensorflow/
    	find                    /workspace/include/google/tensorflow -type f  ! -name "*.h" -delete
    	cp -r third_party       /workspace/include/google/tensorflow/
    	#cp bazel-bin/tensorflow/libtensorflow_cc.so /workspace/lib 
    	#cp bazel-bin/tensorflow/libtensorflow_framework.so /workspace/lib
	cp bazel-bin/tensorflow/lib*.so /workspace/lib
	rm -rf /root/.cache 
    	rm -rf /git/tensorflow 

    	apt-get update && apt-get install -y --no-install-recommends \
    	autoconf \
    	automake

    	rm -rf /var/lib/apt/lists/*
    
	# Careful, the version of Protobuf should match the version used by bazel
	cd /git
    	git clone https://github.com/google/protobuf
    	cd protobuf 
    	git checkout v3.7.0
    	git submodule update --init --recursive
    	./autogen.sh
    	./configure --prefix=/workspace
    	make -j64 install
    	cd ..
    	rm -Rf protobuf


    	cd /git/ && git clone https://github.com/abseil/abseil-cpp.git
    	cd abseil-cpp
    	git checkout 20180600
    	mkdir build
    	cd build
    	cmake -DCMAKE_INSTALL_PREFIX:PATH=/workspace ..
    	make -j64
    	cp -r ../absl /workspace/include/
    	find   /workspace/include/absl -type f  -name "*.cc" -delete 
    	cd && rm -rf /git/absl-cpp

	rm -rf /git/dart
	rm -rf /git/robot_dart

%runscript


%help
This container contains all the libraries and tools usually used in the Adaptive and Intelligent Robotics Lab.
It also includes the Tensorflow library for Python and CPP